<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!--namespace：必须是与本映射文件对应的dao接口的全类名  -->
<mapper namespace="com.milepost.demo.mapper.EmployeeMapper">
	
	<resultMap type="com.milepost.demo.entity.Employee" id="employeeResult">
		<result column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="birth" property="birth"/>
		<result column="create_time" property="createTime"/>
	</resultMap>
	
	<!--
		id：必须与对应dao接口的某个方法的方法名一致,
		parameterType：如果是spring集成myBatis，则这个属性可以省略，这里没有省略	
		keyColumn="user_id" keyProperty="id" useGeneratedKeys="true"：插入后将实体的主键属性赋值，以便于在程序中获取主键
	 -->
	<insert id="add" parameterType="com.milepost.demo.entity.Employee" keyColumn="id" keyProperty="id">
		<!-- insert into employee(id,last_name,email,birth,create_time) values(#{id},#{lastName},#{email},TO_DATE(#{birth},'yyyy-mm-dd'),#{createTime}) -->
		insert into employee(id,last_name,email,birth,create_time) values(#{id},#{lastName},#{email},TO_DATE(TO_CHAR(#{birth},'yyyy-mm-dd'),'yyyy-mm-dd'),#{createTime})
	</insert>
	
	<update id="update" parameterType="com.milepost.demo.entity.Employee">
		update employee
		set last_name = #{lastName},
			email = #{email},
			birth = #{birth},
			create_time = #{createTime}
		where id = #{id}
	</update>
 
 	
 	<delete id="delete" parameterType="string">
		delete from employee
		where id = #{id}
	</delete>

	<select id="findById" resultMap="employeeResult">
		select *
		from employee
		where id = #{id}
	</select>
	
	<select id="findAll" resultMap="employeeResult">
		select * 
		from employee
	</select>
	
</mapper>
