<?xml version="1.0" encoding="UTF-8"?>
<!-- 相关配置见：
http://my.oschina.net/hebad/blog/322578
http://blog.csdn.net/haidage/article/details/6794509/
http://blog.csdn.net/haidage/article/details/6794540
http://blog.csdn.net/haidage/article/details/6794529
 -->
<configuration>
	
	<!-- 
		<appender>是<configuration>的子节点，是负责写日志的组件。
		<appender>有两个必要属性name和class。name指定appender名称，class指定appender的全限定名。
	 -->
	<!-- 
		ConsoleAppender：把日志添加到控制台，有以下子节点：
		<encoder>：对日志进行格式化。（具体参数稍后讲解 ）
		<target>：字符串 System.out 或者 System.err ，默认 System.out ；
	 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36}:%line - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- 
		3.RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
		<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
		<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
		<encoder>：对记录事件进行格式化。（具体参数稍后讲解 ）
		<rollingPolicy>：当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
		<triggeringPolicy >: 告知 RollingFileAppender 何时激活滚动。
		<prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。
		 
			rollingPolicy： 
			TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：
				<fileNamePattern>：
				必要节点，包含文件名及“%d”转换符， “%d”可以包含一个Java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd。
				RollingFileAppender 的file自节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；
				如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。
				<maxHistory>:
				可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且<maxHistory>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件时，那些为了归档而创建的目录也会被删除。
		 
			FixedWindowRollingPolicy： 根据固定窗口算法重命名文件的滚动策略。有以下子节点：
				<minIndex>:窗口索引最小值
				<maxIndex>:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。
				<fileNamePattern >:
				必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip
			 
			triggeringPolicy:
			
			SizeBasedTriggeringPolicy： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点:
				<maxFileSize>:这是活动文件的大小，默认值是10MB。
	 -->
	<appender name="rollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- logs/milepostsoft.log：输出到 D:\Tomcat6\bin 下面 -->
		<!-- ../webapps/milepostlogs/milepostsoft.log -->
		<!--<file>G:/weblog/milepost/logs.log</file>可以使用绝对路径 -->
		<file>G:/firstpro_log/logFile.log</file> <!--可以使用 ${catalina.home}取得tomcat的home，如${catalina.home}/webapps/firstpro/logs/logs.log-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 每个文件10MB -->
			<!-- <fileNamePattern>G:/weblog/milepost/logs.%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern> -->
			<!-- <fileNamePattern>G:/firstpro_log/logs.%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern> --><!--可以使用 ${catalina.home}取得tomcat的home，如${catalina.home}/webapps/firstpro/logs/logs.log--><!-- logs.2017-02-10.0.log.zip -->
			<!-- <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>也可以配置成xxKB等等，生产环境设置为10MB
			</timeBasedFileNamingAndTriggeringPolicy> -->
			
			<!-- 每天生产一个文件 -->
			<fileNamePattern>G:/firstpro_log/logFile.%d{yyyy-MM-dd}.log.zip</fileNamePattern>   
			<maxHistory>30</maxHistory><!-- 最多保留3天的归档文件 -->
		</rollingPolicy>
		<!-- 
			<encoder>：
			负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。
			目前PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个<pattern>节点，用来设置日志的输入格式。
			使用“%”加“转换符”方式，如果要输出“%”，则必须用“\”对“\%”进行转义。
			
			格式修饰符，与转换符共同使用：
			可选的格式修饰符位于“%”和转换符之间。
			第一个可选修饰符是左对齐 标志，符号是减号“-”；接着是可选的最小宽度 修饰符，用十进制数表示。
			如果字符小于最小宽度，则左填充或右填充，默认是左填充（即右对齐），填充符为空格。如果字符大于最小宽度，字符永远不会被截断。
			最大宽度 修饰符，符号是点号"."后面加十进制数。如果字符大于最大宽度，则从前面截断。点符号“.”后面加减号“-”在加数字，表示从尾部截断。
			例如：%-4relative 表示，将输出从程序启动到创建日志记录的时间 进行左对齐 且最小宽度为4。
		 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
	</appender>

	<!--
		project default level 
		Log4j建议只使用FATAL ,ERROR ,WARN ,INFO ,DEBUG这五个级别，项目上线之后推荐使用 WARN
	 -->
	<!-- 
		<logger>：用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性、一个可选的level和一个可选的addtivity属性。
		name：用来指定受此loger约束的某一个包或者具体的某一个类。
		level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
		如果未设置此属性，那么当前loger将会继承上级的级别。
		addtivity：是否向上级loger传递打印信息。默认是true。
		<logger>可以包含零个或多个<appender-ref>元素，表示这个appender将会添加到这个logger。
	 -->
	<!-- 没有指定相关数据，继承字root的 --> 
	<logger name="com.milepost" level="DEBUG">
		<appender-ref ref="console" />
		<appender-ref ref="rollingFile" />
	</logger>
	<!-- 所有的calss -->
	<logger name="org.apache.jsp" level="DEBUG">
		<appender-ref ref="console" />
		<appender-ref ref="rollingFile" />
	</logger>
	<!-- 所有的jsp页面 -->
	
	<!--JdbcTemplate的日志输出器 -->
    <logger name="org.springframework.jdbc.core.StatementCreatorUtils"
        additivity="false" level="TRACE">
        <appender-ref ref="console" />
		<appender-ref ref="rollingFile" />
    </logger>
    <logger name="org.springframework.jdbc.core" level="DEBUG">
    	<appender-ref ref="console" />
		<appender-ref ref="rollingFile" />
    </logger>
    <!-- <logger name="java.sql.Connection">
        <appender-ref ref="console" />
		<appender-ref ref="rollingFile" />
    </logger>
    <logger name="java.sql.Statement">
        <appender-ref ref="console" />
		<appender-ref ref="rollingFile" />
    </logger>
    <logger name="java.sql.PreparedStatement">
        <appender-ref ref="console" />
		<appender-ref ref="rollingFile" />
    </logger>
    <logger name="java.sql.ResultSet">
        <appender-ref ref="console" />
		<appender-ref ref="rollingFile" />
    </logger> -->
    
	
	<!--
        <root>：是一个特殊的<loger>元素，它是根logger，是所有logger的上级，只有一个level属性
		level：同logger，默认是DEBUG。
		<logger>可以包含零个或多个<appender-ref>元素，表示这个appender将会添加到这个logger。
    -->
    <!-- 这里没有配置root，因为配置了，会有很多日志输出，我们只配置我们想要的 -->
	<!-- <root level="DEBUG">
		<appender-ref ref="console" />
		<appender-ref ref="rollingFile" />
	</root> -->
</configuration>